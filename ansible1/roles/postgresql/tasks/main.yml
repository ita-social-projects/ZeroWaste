---
- name: Include encrypted secrets
  include_vars:
    file: vars/secrets.yml

- name: Ensure PostgreSQL Python libraries are installed.
  apt:
    name: "{{ postgresql_python_library }}"
    state: present

- name: Add PostgreSQL APT repository and GPG key
  shell: |
    curl -fsSL https://www.postgresql.org/media/keys/ACCC4CF8.asc|sudo gpg --dearmor -o /etc/apt/trusted.gpg.d/postgresql.gpg -y
    echo "deb http://apt.postgresql.org/pub/repos/apt/ `lsb_release -cs`-pgdg main" |sudo tee  /etc/apt/sources.list.d/pgdg.list
  become: yes

- name: Update APT cache
  apt:
    update_cache: yes

- name: Ensure PostgreSQL packages are installed
  apt:
    name:
      - "postgresql-{{ postgres_version }}"
      - "postgresql-contrib-{{ postgres_version }}"
    state: present

- name: Hold PostgreSQL version
  shell: "apt-mark hold postgresql-{{ postgres_version }}"
  become: yes

- name: Check installed PostgreSQL version
  shell: "psql --version"
  register: postgres_version_output

- debug:
    msg: "Installed PostgreSQL version {{ postgres_version_output.stdout }}"

- name: Ensure all configured locales are present.
  locale_gen: "name={{ item }} state=present"
  with_items: "{{ postgresql_locales }}"
  register: locale_gen_result

- name: Force-restart PostgreSQL after new locales are generated
  service:
    name: "{{ postgresql_daemon }}"
    state: restarted
  when: locale_gen_result.changed

- name: Set PostgreSQL environment variables
  template:
    src: postgres.sh.j2
    dest: /etc/profile.d/postgres.sh
    mode: 0644
  notify: restart postgresql

- name: Ensure PostgreSQL data directory exists
  file:
    path: "{{ postgresql_data_dir }}"
    owner: "{{ postgres_user }}"
    group: "{{ postgres_group }}"
    state: directory
    mode: 0700

- name: Check if PostgreSQL database is initialized
  stat:
    path: "{{ postgresql_data_dir }}/PG_VERSION"
  register: pgdata_dir_version

- name: Ensure PostgreSQL database is initialized
  command: "{{ postgresql_bin_path }}/initdb -D {{ postgresql_data_dir }}"
  when: not pgdata_dir_version.stat.exists
  become: true
  become_user: "{{ postgres_user }}"
  vars:
    ansible_ssh_pipelining: true

- name: Ensure PostgreSQL log directory exists
  file:
    path: "{{ postgresql_effective_log_dir }}"
    owner: "{{ postgres_user }}"
    group: "{{ postgres_group }}"
    state: directory
    mode: 0700

- name: Configure global settings
  lineinfile:
    dest: "{{ postgresql_config_path }}/postgresql.conf"
    regexp: "^#?{{ item.option }}.+$"
    line: "{{ item.option }} = '{{ item.value }}'"
    state: "{{ item.state | default('present') }}"
    mode: 0644
  with_items: "{{ postgresql_global_config_options }}"
  notify: restart postgresql

- name: Configure PostgreSQL. Set hosts in pg_hba.conf
  template:
    src: "pg_hba.conf.j2"
    dest: "{{ postgresql_config_path }}/pg_hba.conf"
    owner: "{{ postgres_user }}"
    group: "{{ postgres_group }}"
    mode: 0600
  notify: restart postgresql
  when: postgresql_hba_entries | length > 0

- name: Define postgresql_unix_socket_directories_mode.
  set_fact:
    postgresql_unix_socket_directories_mode: >-
      {{ __postgresql_unix_socket_directories_mode | default('02775') }}
  when: postgresql_unix_socket_directories_mode is not defined

- name: Ensure PostgreSQL unix socket dirs exists
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ postgres_user }}"
    group: "{{ postgres_group }}"
    mode: "{{ postgresql_unix_socket_directories_mode }}"
  with_items: "{{ postgresql_unix_socket_directories }}"

- name: Ensure PostgreSQL is started and enabled on boot
  service:
    name: "{{ postgresql_daemon }}"
    state: "{{ postgresql_service_state }}"
    enabled: "{{ postgresql_service_enabled }}"

- name: Set permissions on PostgreSQL data directory
  file:
    path: "{{ postgresql_data_dir }}"
    owner: "{{ postgres_user }}"
    group: "{{ postgres_group }}"
    mode: "0700"
  become: true

- name: Set password for postgres user using ALTER USER
  postgresql_user:
    name: "{{ postgres_user }}"
    password: "{{ postgres_user_password }}"
    login_user: "{{ postgres_user }}"
    login_password: "{{ postgres_user_password }}"
    host: "127.0.0.1"
    port: 5432
    state: present
  become: true
  become_user: "{{ postgres_user }}"

- name: Ensure PostgreSQL databases are present
  postgresql_db:
    name: "{{ item.name }}"
    lc_collate: "{{ item.lc_collate | default('en_US.UTF-8') }}"
    lc_ctype: "{{ item.lc_ctype | default('en_US.UTF-8') }}"
    encoding: "{{ item.encoding | default('UTF-8') }}"
    template: "{{ item.template | default('template0') }}"
    login_host: "{{ item.login_host | default('localhost') }}"
    login_password: "{{ postgres_user_password }}"
    login_user: "{{ item.login_user | default(postgres_user) }}"
    login_unix_socket: "{{ item.login_unix_socket | default(postgresql_unix_socket_directories[0]) }}"
    port: "{{ item.port | default(omit) }}"
    owner: "{{ item.owner | default(postgres_user) }}"
    state: "{{ item.state | default('present') }}"
  with_items: "{{ postgresql_databases }}"
  become: true
  become_user: "{{ postgres_user1 }}"
  vars:
    ansible_ssh_pipelining: true

- name: Wait for database creation complete
  wait_for:
    timeout: 5

- name: Ensure PostgreSQL users are present
  postgresql_user:
    name: "{{ item.name }}"
    password: "{{ item.password | default(postgres_user_password) }}"
    login_host: "{{ item.login_host | default('localhost') }}"
    login_password: "{{ item.login_password | default(postgres_user_password) }}"
    login_user: "{{ item.login_user | default(postgres_user) }}"
    login_unix_socket: "{{ item.login_unix_socket | default(postgresql_unix_socket_directories[0]) }}"
    port: "{{ item.port | default(omit) }}"
    state: present
  with_items: "{{ postgresql_users }}"
  become: true
  become_user: "{{ postgres_user }}"
  vars:
    ansible_ssh_pipelining: true
  environment:
    PGOPTIONS: "{{ (postgresql_auth_method == 'scram-sha-256') | ternary('-c password_encryption=scram-sha-256', '') }}"

- name: Ensure PostgreSQL databases exists
  postgresql_db:
    name: "{{ item.name }}"
    login_host: "{{ item.login_host }}"
    login_user: "{{ postgres_user }}"
    login_password: "{{ postgres_user_password }}"
    port: "{{ item.port }}"
    owner: "{{ postgres_user }}"
    state: present
  become: true

- name: Run rake db:migrate
  shell: |
    rake db:migrate
  become: yes
  args:
    chdir: "~/ZeroWaste/"
